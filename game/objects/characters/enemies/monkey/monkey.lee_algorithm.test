import sys
import os
import vertex as Vertex

sys.path.insert(1, os.path.dirname(os.path.realpath(__file__)) + '/../../../characters')
#sys.path.insert(1, os.path.dirname(os.path.realpath(__file__)) + '/../../../game_object')
#from game_object import GameObject
from character import Character #TODO: it should import from here, but some kind of definitions with the movement functions are screwing around with follow_path, causing the game to freeze.

import random

""" A brief description of the class will go here.
The auto-generated comment produced by the script should also mention where to get a list of the api
and which built-in variables exist already.
"""
class Monkey(Character):
    def initialise(self):
        super().initialise()

    def player_action(self, player_object):
        """ This is the method that is run if the player presses the action key while facing a character.
        
        TODO: move this to character.py and make it print an explenation on how to override this by default.
        """
        pass

    def find_escape_path(self, callback = lambda: None):
        engine = self.get_engine()
        self_x, self_y = self.get_position()
        x_dim = 19
        y_dim = 19

        vertex = [] 
        #Accesses y then x

        for y in range(y_dim):
            new_list = []
            for x in range(x_dim):
                new_list.append(Vertex.Vertex(x,y))
            vertex.append(new_list)

        def wave_propagate(current_vertex):
            engine.print_terminal(current_vertex)
            x = current_vertex.x
            y = current_vertex.y
            current_vertex.visited = True
            if x == 0 or x == x_dim - 1 or y == 0 or y == y_dim -1:
                return current_vertex

            #NORTH
            if y + 1 < y_dim:
                if not engine.is_solid((x, y+1)):
                    if not vertex[y+1][x].visited:
                        vertex[y+1][x].parent = current_vertex
                        wave_propagate(vertex[y+1][x])
            #SOUTH
            if y - 1 >= 0:
                if not engine.is_solid((x, y-1)):
                    if not vertex[y-1][x].visited:
                        vertex[y-1][x].parent = current_vertex
                        wave_propagate(vertex[y-1][x])
            #EAST
            if x + 1 < x_dim:
                if not engine.is_solid((x+1, y)):
                    if not vertex[y][x+1].visited:
                        vertex[y][x+1].parent = current_vertex
                        wave_propagate(vertex[y][x+1])
            #WEST
            if x - 1 < x_dim:
                if not engine.is_solid((x-1, y)):
                    if not vertex[y][x-1].visited:
                        vertex[y][x-1].parent = current_vertex
                        wave_propagate(vertex[y][x-1])

        start = vertex[self_y][self_x]
        end = start
        engine.print_terminal(end)
        end = wave_propagate(start)
        start.parent = start

        if end != start:
            engine.print_terminal(end)
            while end.parent != start:
                end = end.parent
            if start.x + 1 == end.x:
                self.move_east(lambda: self.find_escape_path())
            elif start.x - 1 == end.x:
                self.move_west(lambda: self.find_escape_path())
            elif start.y + 1 == end.y:
                self.move_north(lambda: self.find_escape_path())
            elif start.y - 1 == end.y:
                self.move_south(lambda: self.find_escape_path())

            

        engine.add_event(callback)
            

    


        
    





